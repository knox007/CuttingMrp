
@model CuttingMrpLib.Requirement

@{
    ViewBag.Title = "Edit";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <ol class="breadcrumb" style="padding:20px 15px;font-size:1.5em;">
        <li>
            @Html.ActionLink("Requirement", "Index")
        </li>
        <li>
            Edit
            <label class="label label-primary">
                @Html.DisplayFor(model => model.partNr)
            </label>
        </li>
    </ol>

    <hr />

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.id)


        <div class="panel panel-default">

            <div class="panel-heading col-md-12" style="height:50px;">
                <div class="col-md-10" style="font-size:2em;">
                    <label>
                        @Html.DisplayFor(model => model.partNr, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.HiddenFor(model => model.partNr)
                    </label>
                </div>
                <div class="col-md-2">
                    <input type="submit" value="Save" class="btn btn-primary" style="width:150px;" />
                </div>
            </div>

            <div class="panel-body">
                <div class="col-md-12">
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.orderedDate, "OrderedDate",htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.orderedDate, new { htmlAttributes = new { @class = "form-control datetime-picker" } })
                                @Html.ValidationMessageFor(model => model.orderedDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.requiredDate, "RequiredDate",htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.requiredDate, new { htmlAttributes = new { @class = "form-control datetime-picker" } })
                                @Html.ValidationMessageFor(model => model.requiredDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.quantity, "Quantity",htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.quantity, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.quantity, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-12">
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.status, "Status", htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.DropDownList("Status", ViewData["statusList"] as IEnumerable<SelectListItem>, new { @class = "form-control" })

                                @Html.ValidationMessageFor(model => model.status, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.derivedFrom, "DerivedFrom", htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.derivedFrom, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.derivedFrom, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.derivedType, "DerivedType",htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.derivedType, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.derivedType, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@Scripts.Render("~/bundles/requirements")

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
