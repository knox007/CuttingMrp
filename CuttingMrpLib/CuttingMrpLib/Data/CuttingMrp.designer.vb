'------------------------------------------------------------------------------
' <auto-generated>
'     此代码由工具生成。
'     运行时版本:4.0.30319.42000
'
'     对此文件的更改可能会导致不正确的行为，并且如果
'     重新生成代码，这些更改将会丢失。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="CuttingMrp")>  _
Partial Public Class CuttingMrpDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "可扩展性方法定义"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertBatchOrderTemplate(instance As BatchOrderTemplate)
    End Sub
  Partial Private Sub UpdateBatchOrderTemplate(instance As BatchOrderTemplate)
    End Sub
  Partial Private Sub DeleteBatchOrderTemplate(instance As BatchOrderTemplate)
    End Sub
  Partial Private Sub InsertStatusControl(instance As StatusControl)
    End Sub
  Partial Private Sub UpdateStatusControl(instance As StatusControl)
    End Sub
  Partial Private Sub DeleteStatusControl(instance As StatusControl)
    End Sub
  Partial Private Sub InsertBOM(instance As BOM)
    End Sub
  Partial Private Sub UpdateBOM(instance As BOM)
    End Sub
  Partial Private Sub DeleteBOM(instance As BOM)
    End Sub
  Partial Private Sub InsertBomItem(instance As BomItem)
    End Sub
  Partial Private Sub UpdateBomItem(instance As BomItem)
    End Sub
  Partial Private Sub DeleteBomItem(instance As BomItem)
    End Sub
  Partial Private Sub InsertEnumType(instance As EnumType)
    End Sub
  Partial Private Sub UpdateEnumType(instance As EnumType)
    End Sub
  Partial Private Sub DeleteEnumType(instance As EnumType)
    End Sub
  Partial Private Sub InsertPart(instance As Part)
    End Sub
  Partial Private Sub UpdatePart(instance As Part)
    End Sub
  Partial Private Sub DeletePart(instance As Part)
    End Sub
  Partial Private Sub InsertProcessOrder(instance As ProcessOrder)
    End Sub
  Partial Private Sub UpdateProcessOrder(instance As ProcessOrder)
    End Sub
  Partial Private Sub DeleteProcessOrder(instance As ProcessOrder)
    End Sub
  Partial Private Sub InsertMP(instance As MP)
    End Sub
  Partial Private Sub UpdateMP(instance As MP)
    End Sub
  Partial Private Sub DeleteMP(instance As MP)
    End Sub
  Partial Private Sub InsertRequirement(instance As Requirement)
    End Sub
  Partial Private Sub UpdateRequirement(instance As Requirement)
    End Sub
  Partial Private Sub DeleteRequirement(instance As Requirement)
    End Sub
  Partial Private Sub InsertStock(instance As Stock)
    End Sub
  Partial Private Sub UpdateStock(instance As Stock)
    End Sub
  Partial Private Sub DeleteStock(instance As Stock)
    End Sub
  Partial Private Sub InsertOrderDerivation(instance As OrderDerivation)
    End Sub
  Partial Private Sub UpdateOrderDerivation(instance As OrderDerivation)
    End Sub
  Partial Private Sub DeleteOrderDerivation(instance As OrderDerivation)
    End Sub
  Partial Private Sub InsertNumericBuild(instance As NumericBuild)
    End Sub
  Partial Private Sub UpdateNumericBuild(instance As NumericBuild)
    End Sub
  Partial Private Sub DeleteNumericBuild(instance As NumericBuild)
    End Sub
  Partial Private Sub InsertMrpRound(instance As MrpRound)
    End Sub
  Partial Private Sub UpdateMrpRound(instance As MrpRound)
    End Sub
  Partial Private Sub DeleteMrpRound(instance As MrpRound)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.CuttingMrpLib.My.MySettings.Default.CuttingMrpConnectionString1, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property BatchOrderTemplates() As System.Data.Linq.Table(Of BatchOrderTemplate)
		Get
			Return Me.GetTable(Of BatchOrderTemplate)
		End Get
	End Property
	
	Public ReadOnly Property StatusControls() As System.Data.Linq.Table(Of StatusControl)
		Get
			Return Me.GetTable(Of StatusControl)
		End Get
	End Property
	
	Public ReadOnly Property BOMs() As System.Data.Linq.Table(Of BOM)
		Get
			Return Me.GetTable(Of BOM)
		End Get
	End Property
	
	Public ReadOnly Property BomItems() As System.Data.Linq.Table(Of BomItem)
		Get
			Return Me.GetTable(Of BomItem)
		End Get
	End Property
	
	Public ReadOnly Property EnumTypes() As System.Data.Linq.Table(Of EnumType)
		Get
			Return Me.GetTable(Of EnumType)
		End Get
	End Property
	
	Public ReadOnly Property Parts() As System.Data.Linq.Table(Of Part)
		Get
			Return Me.GetTable(Of Part)
		End Get
	End Property
	
	Public ReadOnly Property ProcessOrders() As System.Data.Linq.Table(Of ProcessOrder)
		Get
			Return Me.GetTable(Of ProcessOrder)
		End Get
	End Property
	
	Public ReadOnly Property MPs() As System.Data.Linq.Table(Of MP)
		Get
			Return Me.GetTable(Of MP)
		End Get
	End Property
	
	Public ReadOnly Property Requirements() As System.Data.Linq.Table(Of Requirement)
		Get
			Return Me.GetTable(Of Requirement)
		End Get
	End Property
	
	Public ReadOnly Property Stocks() As System.Data.Linq.Table(Of Stock)
		Get
			Return Me.GetTable(Of Stock)
		End Get
	End Property
	
	Public ReadOnly Property SumOfStocks() As System.Data.Linq.Table(Of SumOfStock)
		Get
			Return Me.GetTable(Of SumOfStock)
		End Get
	End Property
	
	Public ReadOnly Property OrderDerivations() As System.Data.Linq.Table(Of OrderDerivation)
		Get
			Return Me.GetTable(Of OrderDerivation)
		End Get
	End Property
	
	Public ReadOnly Property NumericBuilds() As System.Data.Linq.Table(Of NumericBuild)
		Get
			Return Me.GetTable(Of NumericBuild)
		End Get
	End Property
	
	Public ReadOnly Property MrpRounds() As System.Data.Linq.Table(Of MrpRound)
		Get
			Return Me.GetTable(Of MrpRound)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BatchOrderTemplate")>  _
Partial Public Class BatchOrderTemplate
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _orderNr As String
	
	Private _partNr As String
	
	Private _batchQuantity As Double
	
	Private _type As Integer
	
	Private _bundle As Double
	
	Private _createdAt As Date
	
	Private _updatedAt As Date
	
	Private _operator As String
	
	Private _Part As EntityRef(Of Part)
	
    #Region "可扩展性方法定义"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnorderNrChanging(value As String)
    End Sub
    Partial Private Sub OnorderNrChanged()
    End Sub
    Partial Private Sub OnpartNrChanging(value As String)
    End Sub
    Partial Private Sub OnpartNrChanged()
    End Sub
    Partial Private Sub OnbatchQuantityChanging(value As Double)
    End Sub
    Partial Private Sub OnbatchQuantityChanged()
    End Sub
    Partial Private Sub OntypeChanging(value As Integer)
    End Sub
    Partial Private Sub OntypeChanged()
    End Sub
    Partial Private Sub OnbundleChanging(value As Double)
    End Sub
    Partial Private Sub OnbundleChanged()
    End Sub
    Partial Private Sub OncreatedAtChanging(value As Date)
    End Sub
    Partial Private Sub OncreatedAtChanged()
    End Sub
    Partial Private Sub OnupdatedAtChanging(value As Date)
    End Sub
    Partial Private Sub OnupdatedAtChanged()
    End Sub
    Partial Private Sub OnoperatorChanging(value As String)
    End Sub
    Partial Private Sub OnoperatorChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Part = CType(Nothing, EntityRef(Of Part))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_orderNr", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property orderNr() As String
		Get
			Return Me._orderNr
		End Get
		Set
			If (String.Equals(Me._orderNr, value) = false) Then
				Me.OnorderNrChanging(value)
				Me.SendPropertyChanging
				Me._orderNr = value
				Me.SendPropertyChanged("orderNr")
				Me.OnorderNrChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_partNr", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property partNr() As String
		Get
			Return Me._partNr
		End Get
		Set
			If (String.Equals(Me._partNr, value) = false) Then
				If Me._Part.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnpartNrChanging(value)
				Me.SendPropertyChanging
				Me._partNr = value
				Me.SendPropertyChanged("partNr")
				Me.OnpartNrChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_batchQuantity", DbType:="Float NOT NULL")>  _
	Public Property batchQuantity() As Double
		Get
			Return Me._batchQuantity
		End Get
		Set
			If ((Me._batchQuantity = value)  _
						= false) Then
				Me.OnbatchQuantityChanging(value)
				Me.SendPropertyChanging
				Me._batchQuantity = value
				Me.SendPropertyChanged("batchQuantity")
				Me.OnbatchQuantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_type", DbType:="Int NOT NULL")>  _
	Public Property type() As Integer
		Get
			Return Me._type
		End Get
		Set
			If ((Me._type = value)  _
						= false) Then
				Me.OntypeChanging(value)
				Me.SendPropertyChanging
				Me._type = value
				Me.SendPropertyChanged("type")
				Me.OntypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bundle", DbType:="Float NOT NULL")>  _
	Public Property bundle() As Double
		Get
			Return Me._bundle
		End Get
		Set
			If ((Me._bundle = value)  _
						= false) Then
				Me.OnbundleChanging(value)
				Me.SendPropertyChanging
				Me._bundle = value
				Me.SendPropertyChanged("bundle")
				Me.OnbundleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdAt", DbType:="DateTime NOT NULL")>  _
	Public Property createdAt() As Date
		Get
			Return Me._createdAt
		End Get
		Set
			If ((Me._createdAt = value)  _
						= false) Then
				Me.OncreatedAtChanging(value)
				Me.SendPropertyChanging
				Me._createdAt = value
				Me.SendPropertyChanged("createdAt")
				Me.OncreatedAtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_updatedAt", DbType:="DateTime NOT NULL")>  _
	Public Property updatedAt() As Date
		Get
			Return Me._updatedAt
		End Get
		Set
			If ((Me._updatedAt = value)  _
						= false) Then
				Me.OnupdatedAtChanging(value)
				Me.SendPropertyChanging
				Me._updatedAt = value
				Me.SendPropertyChanged("updatedAt")
				Me.OnupdatedAtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="operator", Storage:="_operator", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property [operator]() As String
		Get
			Return Me._operator
		End Get
		Set
			If (String.Equals(Me._operator, value) = false) Then
				Me.OnoperatorChanging(value)
				Me.SendPropertyChanging
				Me._operator = value
				Me.SendPropertyChanged("[operator]")
				Me.OnoperatorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Part_BatchOrderTemplate", Storage:="_Part", ThisKey:="partNr", OtherKey:="partNr", IsForeignKey:=true)>  _
	Public Property Part() As Part
		Get
			Return Me._Part.Entity
		End Get
		Set
			Dim previousValue As Part = Me._Part.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Part.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Part.Entity = Nothing
					previousValue.BatchOrderTemplates.Remove(Me)
				End If
				Me._Part.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BatchOrderTemplates.Add(Me)
					Me._partNr = value.partNr
				Else
					Me._partNr = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Part")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.StatusControl")>  _
Partial Public Class StatusControl
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _type As String
	
	Private _value As Integer
	
    #Region "可扩展性方法定义"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OntypeChanging(value As String)
    End Sub
    Partial Private Sub OntypeChanged()
    End Sub
    Partial Private Sub OnvalueChanging(value As Integer)
    End Sub
    Partial Private Sub OnvalueChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_type", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property type() As String
		Get
			Return Me._type
		End Get
		Set
			If (String.Equals(Me._type, value) = false) Then
				Me.OntypeChanging(value)
				Me.SendPropertyChanging
				Me._type = value
				Me.SendPropertyChanged("type")
				Me.OntypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_value", DbType:="Int NOT NULL")>  _
	Public Property value() As Integer
		Get
			Return Me._value
		End Get
		Set
			If ((Me._value = value)  _
						= false) Then
				Me.OnvalueChanging(value)
				Me.SendPropertyChanging
				Me._value = value
				Me.SendPropertyChanged("value")
				Me.OnvalueChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BOM")>  _
Partial Public Class BOM
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As String
	
	Private _partNr As String
	
	Private _validFrom As Date
	
	Private _validTo As Date
	
	Private _versionId As String
	
	Private _bomDesc As String
	
	Private _BomItems As EntitySet(Of BomItem)
	
	Private _Part As EntityRef(Of Part)
	
    #Region "可扩展性方法定义"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As String)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnpartNrChanging(value As String)
    End Sub
    Partial Private Sub OnpartNrChanged()
    End Sub
    Partial Private Sub OnvalidFromChanging(value As Date)
    End Sub
    Partial Private Sub OnvalidFromChanged()
    End Sub
    Partial Private Sub OnvalidToChanging(value As Date)
    End Sub
    Partial Private Sub OnvalidToChanged()
    End Sub
    Partial Private Sub OnversionIdChanging(value As String)
    End Sub
    Partial Private Sub OnversionIdChanged()
    End Sub
    Partial Private Sub OnbomDescChanging(value As String)
    End Sub
    Partial Private Sub OnbomDescChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BomItems = New EntitySet(Of BomItem)(AddressOf Me.attach_BomItems, AddressOf Me.detach_BomItems)
		Me._Part = CType(Nothing, EntityRef(Of Part))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property id() As String
		Get
			Return Me._id
		End Get
		Set
			If (String.Equals(Me._id, value) = false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_partNr", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property partNr() As String
		Get
			Return Me._partNr
		End Get
		Set
			If (String.Equals(Me._partNr, value) = false) Then
				If Me._Part.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnpartNrChanging(value)
				Me.SendPropertyChanging
				Me._partNr = value
				Me.SendPropertyChanged("partNr")
				Me.OnpartNrChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_validFrom", DbType:="DateTime NOT NULL")>  _
	Public Property validFrom() As Date
		Get
			Return Me._validFrom
		End Get
		Set
			If ((Me._validFrom = value)  _
						= false) Then
				Me.OnvalidFromChanging(value)
				Me.SendPropertyChanging
				Me._validFrom = value
				Me.SendPropertyChanged("validFrom")
				Me.OnvalidFromChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_validTo", DbType:="DateTime NOT NULL")>  _
	Public Property validTo() As Date
		Get
			Return Me._validTo
		End Get
		Set
			If ((Me._validTo = value)  _
						= false) Then
				Me.OnvalidToChanging(value)
				Me.SendPropertyChanging
				Me._validTo = value
				Me.SendPropertyChanged("validTo")
				Me.OnvalidToChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_versionId", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property versionId() As String
		Get
			Return Me._versionId
		End Get
		Set
			If (String.Equals(Me._versionId, value) = false) Then
				Me.OnversionIdChanging(value)
				Me.SendPropertyChanging
				Me._versionId = value
				Me.SendPropertyChanged("versionId")
				Me.OnversionIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bomDesc", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property bomDesc() As String
		Get
			Return Me._bomDesc
		End Get
		Set
			If (String.Equals(Me._bomDesc, value) = false) Then
				Me.OnbomDescChanging(value)
				Me.SendPropertyChanging
				Me._bomDesc = value
				Me.SendPropertyChanged("bomDesc")
				Me.OnbomDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BOM_BomItem", Storage:="_BomItems", ThisKey:="id", OtherKey:="bomId")>  _
	Public Property BomItems() As EntitySet(Of BomItem)
		Get
			Return Me._BomItems
		End Get
		Set
			Me._BomItems.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Part_BOM", Storage:="_Part", ThisKey:="partNr", OtherKey:="partNr", IsForeignKey:=true)>  _
	Public Property Part() As Part
		Get
			Return Me._Part.Entity
		End Get
		Set
			Dim previousValue As Part = Me._Part.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Part.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Part.Entity = Nothing
					previousValue.BOMs.Remove(Me)
				End If
				Me._Part.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BOMs.Add(Me)
					Me._partNr = value.partNr
				Else
					Me._partNr = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Part")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_BomItems(ByVal entity As BomItem)
		Me.SendPropertyChanging
		entity.BOM = Me
	End Sub
	
	Private Sub detach_BomItems(ByVal entity As BomItem)
		Me.SendPropertyChanging
		entity.BOM = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BomItem")>  _
Partial Public Class BomItem
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _componentId As String
	
	Private _validFrom As Date
	
	Private _validTo As Date
	
	Private _hasChind As Byte
	
	Private _uom As Integer
	
	Private _quantity As Double
	
	Private _bomId As String
	
	Private _BOM As EntityRef(Of BOM)
	
    #Region "可扩展性方法定义"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OncomponentIdChanging(value As String)
    End Sub
    Partial Private Sub OncomponentIdChanged()
    End Sub
    Partial Private Sub OnvalidFromChanging(value As Date)
    End Sub
    Partial Private Sub OnvalidFromChanged()
    End Sub
    Partial Private Sub OnvalidToChanging(value As Date)
    End Sub
    Partial Private Sub OnvalidToChanged()
    End Sub
    Partial Private Sub OnhasChindChanging(value As Byte)
    End Sub
    Partial Private Sub OnhasChindChanged()
    End Sub
    Partial Private Sub OnuomChanging(value As Integer)
    End Sub
    Partial Private Sub OnuomChanged()
    End Sub
    Partial Private Sub OnquantityChanging(value As Double)
    End Sub
    Partial Private Sub OnquantityChanged()
    End Sub
    Partial Private Sub OnbomIdChanging(value As String)
    End Sub
    Partial Private Sub OnbomIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BOM = CType(Nothing, EntityRef(Of BOM))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_componentId", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property componentId() As String
		Get
			Return Me._componentId
		End Get
		Set
			If (String.Equals(Me._componentId, value) = false) Then
				Me.OncomponentIdChanging(value)
				Me.SendPropertyChanging
				Me._componentId = value
				Me.SendPropertyChanged("componentId")
				Me.OncomponentIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_validFrom", DbType:="DateTime NOT NULL")>  _
	Public Property validFrom() As Date
		Get
			Return Me._validFrom
		End Get
		Set
			If ((Me._validFrom = value)  _
						= false) Then
				Me.OnvalidFromChanging(value)
				Me.SendPropertyChanging
				Me._validFrom = value
				Me.SendPropertyChanged("validFrom")
				Me.OnvalidFromChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_validTo", DbType:="DateTime NOT NULL")>  _
	Public Property validTo() As Date
		Get
			Return Me._validTo
		End Get
		Set
			If ((Me._validTo = value)  _
						= false) Then
				Me.OnvalidToChanging(value)
				Me.SendPropertyChanging
				Me._validTo = value
				Me.SendPropertyChanged("validTo")
				Me.OnvalidToChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hasChind", DbType:="TinyInt NOT NULL")>  _
	Public Property hasChind() As Byte
		Get
			Return Me._hasChind
		End Get
		Set
			If ((Me._hasChind = value)  _
						= false) Then
				Me.OnhasChindChanging(value)
				Me.SendPropertyChanging
				Me._hasChind = value
				Me.SendPropertyChanged("hasChind")
				Me.OnhasChindChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_uom", DbType:="Int NOT NULL")>  _
	Public Property uom() As Integer
		Get
			Return Me._uom
		End Get
		Set
			If ((Me._uom = value)  _
						= false) Then
				Me.OnuomChanging(value)
				Me.SendPropertyChanging
				Me._uom = value
				Me.SendPropertyChanged("uom")
				Me.OnuomChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quantity", DbType:="Float NOT NULL")>  _
	Public Property quantity() As Double
		Get
			Return Me._quantity
		End Get
		Set
			If ((Me._quantity = value)  _
						= false) Then
				Me.OnquantityChanging(value)
				Me.SendPropertyChanging
				Me._quantity = value
				Me.SendPropertyChanged("quantity")
				Me.OnquantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bomId", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property bomId() As String
		Get
			Return Me._bomId
		End Get
		Set
			If (String.Equals(Me._bomId, value) = false) Then
				If Me._BOM.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnbomIdChanging(value)
				Me.SendPropertyChanging
				Me._bomId = value
				Me.SendPropertyChanged("bomId")
				Me.OnbomIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BOM_BomItem", Storage:="_BOM", ThisKey:="bomId", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property BOM() As BOM
		Get
			Return Me._BOM.Entity
		End Get
		Set
			Dim previousValue As BOM = Me._BOM.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._BOM.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._BOM.Entity = Nothing
					previousValue.BomItems.Remove(Me)
				End If
				Me._BOM.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BomItems.Add(Me)
					Me._bomId = value.id
				Else
					Me._bomId = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("BOM")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EnumType")>  _
Partial Public Class EnumType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _enumType As String
	
	Private _enumKey As String
	
	Private _enumValue As Integer
	
	Private _enumDesc As String
	
    #Region "可扩展性方法定义"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnenumTypeChanging(value As String)
    End Sub
    Partial Private Sub OnenumTypeChanged()
    End Sub
    Partial Private Sub OnenumKeyChanging(value As String)
    End Sub
    Partial Private Sub OnenumKeyChanged()
    End Sub
    Partial Private Sub OnenumValueChanging(value As Integer)
    End Sub
    Partial Private Sub OnenumValueChanged()
    End Sub
    Partial Private Sub OnenumDescChanging(value As String)
    End Sub
    Partial Private Sub OnenumDescChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_enumType", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property enumType() As String
		Get
			Return Me._enumType
		End Get
		Set
			If (String.Equals(Me._enumType, value) = false) Then
				Me.OnenumTypeChanging(value)
				Me.SendPropertyChanging
				Me._enumType = value
				Me.SendPropertyChanged("enumType")
				Me.OnenumTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_enumKey", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property enumKey() As String
		Get
			Return Me._enumKey
		End Get
		Set
			If (String.Equals(Me._enumKey, value) = false) Then
				Me.OnenumKeyChanging(value)
				Me.SendPropertyChanging
				Me._enumKey = value
				Me.SendPropertyChanged("enumKey")
				Me.OnenumKeyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_enumValue", DbType:="Int NOT NULL")>  _
	Public Property enumValue() As Integer
		Get
			Return Me._enumValue
		End Get
		Set
			If ((Me._enumValue = value)  _
						= false) Then
				Me.OnenumValueChanging(value)
				Me.SendPropertyChanging
				Me._enumValue = value
				Me.SendPropertyChanged("enumValue")
				Me.OnenumValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_enumDesc", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property enumDesc() As String
		Get
			Return Me._enumDesc
		End Get
		Set
			If (String.Equals(Me._enumDesc, value) = false) Then
				Me.OnenumDescChanging(value)
				Me.SendPropertyChanging
				Me._enumDesc = value
				Me.SendPropertyChanged("enumDesc")
				Me.OnenumDescChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Part")>  _
Partial Public Class Part
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _partNr As String
	
	Private _partType As Integer
	
	Private _partDesc As String
	
	Private _partStatus As Integer
	
	Private _BatchOrderTemplates As EntitySet(Of BatchOrderTemplate)
	
	Private _BOMs As EntitySet(Of BOM)
	
	Private _ProcessOrders As EntitySet(Of ProcessOrder)
	
	Private _MPs As EntitySet(Of MP)
	
	Private _Requirements As EntitySet(Of Requirement)
	
	Private _Stocks As EntitySet(Of Stock)
	
    #Region "可扩展性方法定义"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnpartNrChanging(value As String)
    End Sub
    Partial Private Sub OnpartNrChanged()
    End Sub
    Partial Private Sub OnpartTypeChanging(value As Integer)
    End Sub
    Partial Private Sub OnpartTypeChanged()
    End Sub
    Partial Private Sub OnpartDescChanging(value As String)
    End Sub
    Partial Private Sub OnpartDescChanged()
    End Sub
    Partial Private Sub OnpartStatusChanging(value As Integer)
    End Sub
    Partial Private Sub OnpartStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BatchOrderTemplates = New EntitySet(Of BatchOrderTemplate)(AddressOf Me.attach_BatchOrderTemplates, AddressOf Me.detach_BatchOrderTemplates)
		Me._BOMs = New EntitySet(Of BOM)(AddressOf Me.attach_BOMs, AddressOf Me.detach_BOMs)
		Me._ProcessOrders = New EntitySet(Of ProcessOrder)(AddressOf Me.attach_ProcessOrders, AddressOf Me.detach_ProcessOrders)
		Me._MPs = New EntitySet(Of MP)(AddressOf Me.attach_MPs, AddressOf Me.detach_MPs)
		Me._Requirements = New EntitySet(Of Requirement)(AddressOf Me.attach_Requirements, AddressOf Me.detach_Requirements)
		Me._Stocks = New EntitySet(Of Stock)(AddressOf Me.attach_Stocks, AddressOf Me.detach_Stocks)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_partNr", DbType:="VarChar(200) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property partNr() As String
		Get
			Return Me._partNr
		End Get
		Set
			If (String.Equals(Me._partNr, value) = false) Then
				Me.OnpartNrChanging(value)
				Me.SendPropertyChanging
				Me._partNr = value
				Me.SendPropertyChanged("partNr")
				Me.OnpartNrChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_partType", DbType:="Int NOT NULL")>  _
	Public Property partType() As Integer
		Get
			Return Me._partType
		End Get
		Set
			If ((Me._partType = value)  _
						= false) Then
				Me.OnpartTypeChanging(value)
				Me.SendPropertyChanging
				Me._partType = value
				Me.SendPropertyChanged("partType")
				Me.OnpartTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_partDesc", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property partDesc() As String
		Get
			Return Me._partDesc
		End Get
		Set
			If (String.Equals(Me._partDesc, value) = false) Then
				Me.OnpartDescChanging(value)
				Me.SendPropertyChanging
				Me._partDesc = value
				Me.SendPropertyChanged("partDesc")
				Me.OnpartDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_partStatus", DbType:="Int NOT NULL")>  _
	Public Property partStatus() As Integer
		Get
			Return Me._partStatus
		End Get
		Set
			If ((Me._partStatus = value)  _
						= false) Then
				Me.OnpartStatusChanging(value)
				Me.SendPropertyChanging
				Me._partStatus = value
				Me.SendPropertyChanged("partStatus")
				Me.OnpartStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Part_BatchOrderTemplate", Storage:="_BatchOrderTemplates", ThisKey:="partNr", OtherKey:="partNr")>  _
	Public Property BatchOrderTemplates() As EntitySet(Of BatchOrderTemplate)
		Get
			Return Me._BatchOrderTemplates
		End Get
		Set
			Me._BatchOrderTemplates.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Part_BOM", Storage:="_BOMs", ThisKey:="partNr", OtherKey:="partNr")>  _
	Public Property BOMs() As EntitySet(Of BOM)
		Get
			Return Me._BOMs
		End Get
		Set
			Me._BOMs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Part_ProcessOrder", Storage:="_ProcessOrders", ThisKey:="partNr", OtherKey:="partNr")>  _
	Public Property ProcessOrders() As EntitySet(Of ProcessOrder)
		Get
			Return Me._ProcessOrders
		End Get
		Set
			Me._ProcessOrders.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Part_MP", Storage:="_MPs", ThisKey:="partNr", OtherKey:="partnr")>  _
	Public Property MPs() As EntitySet(Of MP)
		Get
			Return Me._MPs
		End Get
		Set
			Me._MPs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Part_Requirement", Storage:="_Requirements", ThisKey:="partNr", OtherKey:="partNr")>  _
	Public Property Requirements() As EntitySet(Of Requirement)
		Get
			Return Me._Requirements
		End Get
		Set
			Me._Requirements.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Part_Stock", Storage:="_Stocks", ThisKey:="partNr", OtherKey:="partNr")>  _
	Public Property Stocks() As EntitySet(Of Stock)
		Get
			Return Me._Stocks
		End Get
		Set
			Me._Stocks.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_BatchOrderTemplates(ByVal entity As BatchOrderTemplate)
		Me.SendPropertyChanging
		entity.Part = Me
	End Sub
	
	Private Sub detach_BatchOrderTemplates(ByVal entity As BatchOrderTemplate)
		Me.SendPropertyChanging
		entity.Part = Nothing
	End Sub
	
	Private Sub attach_BOMs(ByVal entity As BOM)
		Me.SendPropertyChanging
		entity.Part = Me
	End Sub
	
	Private Sub detach_BOMs(ByVal entity As BOM)
		Me.SendPropertyChanging
		entity.Part = Nothing
	End Sub
	
	Private Sub attach_ProcessOrders(ByVal entity As ProcessOrder)
		Me.SendPropertyChanging
		entity.Part = Me
	End Sub
	
	Private Sub detach_ProcessOrders(ByVal entity As ProcessOrder)
		Me.SendPropertyChanging
		entity.Part = Nothing
	End Sub
	
	Private Sub attach_MPs(ByVal entity As MP)
		Me.SendPropertyChanging
		entity.Part = Me
	End Sub
	
	Private Sub detach_MPs(ByVal entity As MP)
		Me.SendPropertyChanging
		entity.Part = Nothing
	End Sub
	
	Private Sub attach_Requirements(ByVal entity As Requirement)
		Me.SendPropertyChanging
		entity.Part = Me
	End Sub
	
	Private Sub detach_Requirements(ByVal entity As Requirement)
		Me.SendPropertyChanging
		entity.Part = Nothing
	End Sub
	
	Private Sub attach_Stocks(ByVal entity As Stock)
		Me.SendPropertyChanging
		entity.Part = Me
	End Sub
	
	Private Sub detach_Stocks(ByVal entity As Stock)
		Me.SendPropertyChanging
		entity.Part = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ProcessOrder")>  _
Partial Public Class ProcessOrder
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _orderNr As String
	
	Private _sourceDoc As String
	
	Private _derivedFrom As String
	
	Private _proceeDate As Date
	
	Private _partNr As String
	
	Private _sourceQuantity As Double
	
	Private _actualQuantity As Double
	
	Private _completeRate As Double
	
	Private _status As Integer
	
	Private _requirementId As Integer
	
	Private _OrderDerivations As EntitySet(Of OrderDerivation)
	
	Private _Part As EntityRef(Of Part)
	
    #Region "可扩展性方法定义"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnorderNrChanging(value As String)
    End Sub
    Partial Private Sub OnorderNrChanged()
    End Sub
    Partial Private Sub OnsourceDocChanging(value As String)
    End Sub
    Partial Private Sub OnsourceDocChanged()
    End Sub
    Partial Private Sub OnderivedFromChanging(value As String)
    End Sub
    Partial Private Sub OnderivedFromChanged()
    End Sub
    Partial Private Sub OnproceeDateChanging(value As Date)
    End Sub
    Partial Private Sub OnproceeDateChanged()
    End Sub
    Partial Private Sub OnpartNrChanging(value As String)
    End Sub
    Partial Private Sub OnpartNrChanged()
    End Sub
    Partial Private Sub OnsourceQuantityChanging(value As Double)
    End Sub
    Partial Private Sub OnsourceQuantityChanged()
    End Sub
    Partial Private Sub OnactualQuantityChanging(value As Double)
    End Sub
    Partial Private Sub OnactualQuantityChanged()
    End Sub
    Partial Private Sub OncompleteRateChanging(value As Double)
    End Sub
    Partial Private Sub OncompleteRateChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As Integer)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    Partial Private Sub OnrequirementIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnrequirementIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._OrderDerivations = New EntitySet(Of OrderDerivation)(AddressOf Me.attach_OrderDerivations, AddressOf Me.detach_OrderDerivations)
		Me._Part = CType(Nothing, EntityRef(Of Part))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_orderNr", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property orderNr() As String
		Get
			Return Me._orderNr
		End Get
		Set
			If (String.Equals(Me._orderNr, value) = false) Then
				Me.OnorderNrChanging(value)
				Me.SendPropertyChanging
				Me._orderNr = value
				Me.SendPropertyChanged("orderNr")
				Me.OnorderNrChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sourceDoc", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sourceDoc() As String
		Get
			Return Me._sourceDoc
		End Get
		Set
			If (String.Equals(Me._sourceDoc, value) = false) Then
				Me.OnsourceDocChanging(value)
				Me.SendPropertyChanging
				Me._sourceDoc = value
				Me.SendPropertyChanged("sourceDoc")
				Me.OnsourceDocChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_derivedFrom", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property derivedFrom() As String
		Get
			Return Me._derivedFrom
		End Get
		Set
			If (String.Equals(Me._derivedFrom, value) = false) Then
				Me.OnderivedFromChanging(value)
				Me.SendPropertyChanging
				Me._derivedFrom = value
				Me.SendPropertyChanged("derivedFrom")
				Me.OnderivedFromChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_proceeDate", DbType:="DateTime NOT NULL")>  _
	Public Property proceeDate() As Date
		Get
			Return Me._proceeDate
		End Get
		Set
			If ((Me._proceeDate = value)  _
						= false) Then
				Me.OnproceeDateChanging(value)
				Me.SendPropertyChanging
				Me._proceeDate = value
				Me.SendPropertyChanged("proceeDate")
				Me.OnproceeDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_partNr", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property partNr() As String
		Get
			Return Me._partNr
		End Get
		Set
			If (String.Equals(Me._partNr, value) = false) Then
				If Me._Part.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnpartNrChanging(value)
				Me.SendPropertyChanging
				Me._partNr = value
				Me.SendPropertyChanged("partNr")
				Me.OnpartNrChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sourceQuantity", DbType:="Float NOT NULL")>  _
	Public Property sourceQuantity() As Double
		Get
			Return Me._sourceQuantity
		End Get
		Set
			If ((Me._sourceQuantity = value)  _
						= false) Then
				Me.OnsourceQuantityChanging(value)
				Me.SendPropertyChanging
				Me._sourceQuantity = value
				Me.SendPropertyChanged("sourceQuantity")
				Me.OnsourceQuantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_actualQuantity", DbType:="Float NOT NULL")>  _
	Public Property actualQuantity() As Double
		Get
			Return Me._actualQuantity
		End Get
		Set
			If ((Me._actualQuantity = value)  _
						= false) Then
				Me.OnactualQuantityChanging(value)
				Me.SendPropertyChanging
				Me._actualQuantity = value
				Me.SendPropertyChanged("actualQuantity")
				Me.OnactualQuantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_completeRate", DbType:="Float NOT NULL")>  _
	Public Property completeRate() As Double
		Get
			Return Me._completeRate
		End Get
		Set
			If ((Me._completeRate = value)  _
						= false) Then
				Me.OncompleteRateChanging(value)
				Me.SendPropertyChanging
				Me._completeRate = value
				Me.SendPropertyChanged("completeRate")
				Me.OncompleteRateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="Int NOT NULL")>  _
	Public Property status() As Integer
		Get
			Return Me._status
		End Get
		Set
			If ((Me._status = value)  _
						= false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requirementId", DbType:="Int NOT NULL")>  _
	Public Property requirementId() As Integer
		Get
			Return Me._requirementId
		End Get
		Set
			If ((Me._requirementId = value)  _
						= false) Then
				Me.OnrequirementIdChanging(value)
				Me.SendPropertyChanging
				Me._requirementId = value
				Me.SendPropertyChanged("requirementId")
				Me.OnrequirementIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ProcessOrder_OrderDerivation", Storage:="_OrderDerivations", ThisKey:="orderNr", OtherKey:="orderId")>  _
	Public Property OrderDerivations() As EntitySet(Of OrderDerivation)
		Get
			Return Me._OrderDerivations
		End Get
		Set
			Me._OrderDerivations.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Part_ProcessOrder", Storage:="_Part", ThisKey:="partNr", OtherKey:="partNr", IsForeignKey:=true)>  _
	Public Property Part() As Part
		Get
			Return Me._Part.Entity
		End Get
		Set
			Dim previousValue As Part = Me._Part.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Part.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Part.Entity = Nothing
					previousValue.ProcessOrders.Remove(Me)
				End If
				Me._Part.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ProcessOrders.Add(Me)
					Me._partNr = value.partNr
				Else
					Me._partNr = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Part")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_OrderDerivations(ByVal entity As OrderDerivation)
		Me.SendPropertyChanging
		entity.ProcessOrder = Me
	End Sub
	
	Private Sub detach_OrderDerivations(ByVal entity As OrderDerivation)
		Me.SendPropertyChanging
		entity.ProcessOrder = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MPS")>  _
Partial Public Class MP
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _partnr As String
	
	Private _orderedDate As Date
	
	Private _requiredDate As Date
	
	Private _quantity As Double
	
	Private _source As String
	
	Private _status As Integer
	
	Private _Part As EntityRef(Of Part)
	
    #Region "可扩展性方法定义"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnpartnrChanging(value As String)
    End Sub
    Partial Private Sub OnpartnrChanged()
    End Sub
    Partial Private Sub OnorderedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnorderedDateChanged()
    End Sub
    Partial Private Sub OnrequiredDateChanging(value As Date)
    End Sub
    Partial Private Sub OnrequiredDateChanged()
    End Sub
    Partial Private Sub OnquantityChanging(value As Double)
    End Sub
    Partial Private Sub OnquantityChanged()
    End Sub
    Partial Private Sub OnsourceChanging(value As String)
    End Sub
    Partial Private Sub OnsourceChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As Integer)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Part = CType(Nothing, EntityRef(Of Part))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_partnr", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property partnr() As String
		Get
			Return Me._partnr
		End Get
		Set
			If (String.Equals(Me._partnr, value) = false) Then
				If Me._Part.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnpartnrChanging(value)
				Me.SendPropertyChanging
				Me._partnr = value
				Me.SendPropertyChanged("partnr")
				Me.OnpartnrChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_orderedDate", DbType:="DateTime NOT NULL")>  _
	Public Property orderedDate() As Date
		Get
			Return Me._orderedDate
		End Get
		Set
			If ((Me._orderedDate = value)  _
						= false) Then
				Me.OnorderedDateChanging(value)
				Me.SendPropertyChanging
				Me._orderedDate = value
				Me.SendPropertyChanged("orderedDate")
				Me.OnorderedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requiredDate", DbType:="DateTime NOT NULL")>  _
	Public Property requiredDate() As Date
		Get
			Return Me._requiredDate
		End Get
		Set
			If ((Me._requiredDate = value)  _
						= false) Then
				Me.OnrequiredDateChanging(value)
				Me.SendPropertyChanging
				Me._requiredDate = value
				Me.SendPropertyChanged("requiredDate")
				Me.OnrequiredDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quantity", DbType:="Float NOT NULL")>  _
	Public Property quantity() As Double
		Get
			Return Me._quantity
		End Get
		Set
			If ((Me._quantity = value)  _
						= false) Then
				Me.OnquantityChanging(value)
				Me.SendPropertyChanging
				Me._quantity = value
				Me.SendPropertyChanged("quantity")
				Me.OnquantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_source", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property source() As String
		Get
			Return Me._source
		End Get
		Set
			If (String.Equals(Me._source, value) = false) Then
				Me.OnsourceChanging(value)
				Me.SendPropertyChanging
				Me._source = value
				Me.SendPropertyChanged("source")
				Me.OnsourceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="Int NOT NULL")>  _
	Public Property status() As Integer
		Get
			Return Me._status
		End Get
		Set
			If ((Me._status = value)  _
						= false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Part_MP", Storage:="_Part", ThisKey:="partnr", OtherKey:="partNr", IsForeignKey:=true)>  _
	Public Property Part() As Part
		Get
			Return Me._Part.Entity
		End Get
		Set
			Dim previousValue As Part = Me._Part.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Part.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Part.Entity = Nothing
					previousValue.MPs.Remove(Me)
				End If
				Me._Part.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MPs.Add(Me)
					Me._partnr = value.partNr
				Else
					Me._partnr = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Part")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Requirement")>  _
Partial Public Class Requirement
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _partNr As String
	
	Private _orderedDate As Date
	
	Private _requiredDate As Date
	
	Private _quantity As Double
	
	Private _status As Integer
	
	Private _derivedFrom As String
	
	Private _derivedType As String
	
	Private _OrderDerivation As EntityRef(Of OrderDerivation)
	
	Private _Part As EntityRef(Of Part)
	
    #Region "可扩展性方法定义"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnpartNrChanging(value As String)
    End Sub
    Partial Private Sub OnpartNrChanged()
    End Sub
    Partial Private Sub OnorderedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnorderedDateChanged()
    End Sub
    Partial Private Sub OnrequiredDateChanging(value As Date)
    End Sub
    Partial Private Sub OnrequiredDateChanged()
    End Sub
    Partial Private Sub OnquantityChanging(value As Double)
    End Sub
    Partial Private Sub OnquantityChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As Integer)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    Partial Private Sub OnderivedFromChanging(value As String)
    End Sub
    Partial Private Sub OnderivedFromChanged()
    End Sub
    Partial Private Sub OnderivedTypeChanging(value As String)
    End Sub
    Partial Private Sub OnderivedTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._OrderDerivation = CType(Nothing, EntityRef(Of OrderDerivation))
		Me._Part = CType(Nothing, EntityRef(Of Part))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_partNr", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property partNr() As String
		Get
			Return Me._partNr
		End Get
		Set
			If (String.Equals(Me._partNr, value) = false) Then
				If Me._Part.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnpartNrChanging(value)
				Me.SendPropertyChanging
				Me._partNr = value
				Me.SendPropertyChanged("partNr")
				Me.OnpartNrChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_orderedDate", DbType:="DateTime NOT NULL")>  _
	Public Property orderedDate() As Date
		Get
			Return Me._orderedDate
		End Get
		Set
			If ((Me._orderedDate = value)  _
						= false) Then
				Me.OnorderedDateChanging(value)
				Me.SendPropertyChanging
				Me._orderedDate = value
				Me.SendPropertyChanged("orderedDate")
				Me.OnorderedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requiredDate", DbType:="DateTime NOT NULL")>  _
	Public Property requiredDate() As Date
		Get
			Return Me._requiredDate
		End Get
		Set
			If ((Me._requiredDate = value)  _
						= false) Then
				Me.OnrequiredDateChanging(value)
				Me.SendPropertyChanging
				Me._requiredDate = value
				Me.SendPropertyChanged("requiredDate")
				Me.OnrequiredDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quantity", DbType:="Float NOT NULL")>  _
	Public Property quantity() As Double
		Get
			Return Me._quantity
		End Get
		Set
			If ((Me._quantity = value)  _
						= false) Then
				Me.OnquantityChanging(value)
				Me.SendPropertyChanging
				Me._quantity = value
				Me.SendPropertyChanged("quantity")
				Me.OnquantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="Int NOT NULL")>  _
	Public Property status() As Integer
		Get
			Return Me._status
		End Get
		Set
			If ((Me._status = value)  _
						= false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_derivedFrom", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property derivedFrom() As String
		Get
			Return Me._derivedFrom
		End Get
		Set
			If (String.Equals(Me._derivedFrom, value) = false) Then
				Me.OnderivedFromChanging(value)
				Me.SendPropertyChanging
				Me._derivedFrom = value
				Me.SendPropertyChanged("derivedFrom")
				Me.OnderivedFromChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_derivedType", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property derivedType() As String
		Get
			Return Me._derivedType
		End Get
		Set
			If (String.Equals(Me._derivedType, value) = false) Then
				Me.OnderivedTypeChanging(value)
				Me.SendPropertyChanging
				Me._derivedType = value
				Me.SendPropertyChanged("derivedType")
				Me.OnderivedTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Requirement_OrderDerivation", Storage:="_OrderDerivation", ThisKey:="id", OtherKey:="id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property OrderDerivation() As OrderDerivation
		Get
			Return Me._OrderDerivation.Entity
		End Get
		Set
			Dim previousValue As OrderDerivation = Me._OrderDerivation.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._OrderDerivation.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._OrderDerivation.Entity = Nothing
					previousValue.Requirement = Nothing
				End If
				Me._OrderDerivation.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.Requirement = Me
				End If
				Me.SendPropertyChanged("OrderDerivation")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Part_Requirement", Storage:="_Part", ThisKey:="partNr", OtherKey:="partNr", IsForeignKey:=true)>  _
	Public Property Part() As Part
		Get
			Return Me._Part.Entity
		End Get
		Set
			Dim previousValue As Part = Me._Part.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Part.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Part.Entity = Nothing
					previousValue.Requirements.Remove(Me)
				End If
				Me._Part.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Requirements.Add(Me)
					Me._partNr = value.partNr
				Else
					Me._partNr = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Part")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Stock")>  _
Partial Public Class Stock
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _partNr As String
	
	Private _fifo As Date
	
	Private _quantity As Double
	
	Private _container As String
	
	Private _wh As String
	
	Private _position As String
	
	Private _source As String
	
	Private _sourceType As String
	
	Private _Part As EntityRef(Of Part)
	
    #Region "可扩展性方法定义"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnpartNrChanging(value As String)
    End Sub
    Partial Private Sub OnpartNrChanged()
    End Sub
    Partial Private Sub OnfifoChanging(value As Date)
    End Sub
    Partial Private Sub OnfifoChanged()
    End Sub
    Partial Private Sub OnquantityChanging(value As Double)
    End Sub
    Partial Private Sub OnquantityChanged()
    End Sub
    Partial Private Sub OncontainerChanging(value As String)
    End Sub
    Partial Private Sub OncontainerChanged()
    End Sub
    Partial Private Sub OnwhChanging(value As String)
    End Sub
    Partial Private Sub OnwhChanged()
    End Sub
    Partial Private Sub OnpositionChanging(value As String)
    End Sub
    Partial Private Sub OnpositionChanged()
    End Sub
    Partial Private Sub OnsourceChanging(value As String)
    End Sub
    Partial Private Sub OnsourceChanged()
    End Sub
    Partial Private Sub OnsourceTypeChanging(value As String)
    End Sub
    Partial Private Sub OnsourceTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Part = CType(Nothing, EntityRef(Of Part))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_partNr", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property partNr() As String
		Get
			Return Me._partNr
		End Get
		Set
			If (String.Equals(Me._partNr, value) = false) Then
				If Me._Part.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnpartNrChanging(value)
				Me.SendPropertyChanging
				Me._partNr = value
				Me.SendPropertyChanged("partNr")
				Me.OnpartNrChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fifo", DbType:="DateTime NOT NULL")>  _
	Public Property fifo() As Date
		Get
			Return Me._fifo
		End Get
		Set
			If ((Me._fifo = value)  _
						= false) Then
				Me.OnfifoChanging(value)
				Me.SendPropertyChanging
				Me._fifo = value
				Me.SendPropertyChanged("fifo")
				Me.OnfifoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quantity", DbType:="Float NOT NULL")>  _
	Public Property quantity() As Double
		Get
			Return Me._quantity
		End Get
		Set
			If ((Me._quantity = value)  _
						= false) Then
				Me.OnquantityChanging(value)
				Me.SendPropertyChanging
				Me._quantity = value
				Me.SendPropertyChanged("quantity")
				Me.OnquantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_container", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property container() As String
		Get
			Return Me._container
		End Get
		Set
			If (String.Equals(Me._container, value) = false) Then
				Me.OncontainerChanging(value)
				Me.SendPropertyChanging
				Me._container = value
				Me.SendPropertyChanged("container")
				Me.OncontainerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_wh", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property wh() As String
		Get
			Return Me._wh
		End Get
		Set
			If (String.Equals(Me._wh, value) = false) Then
				Me.OnwhChanging(value)
				Me.SendPropertyChanging
				Me._wh = value
				Me.SendPropertyChanged("wh")
				Me.OnwhChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_position", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property position() As String
		Get
			Return Me._position
		End Get
		Set
			If (String.Equals(Me._position, value) = false) Then
				Me.OnpositionChanging(value)
				Me.SendPropertyChanging
				Me._position = value
				Me.SendPropertyChanged("position")
				Me.OnpositionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_source", DbType:="VarChar(200)")>  _
	Public Property source() As String
		Get
			Return Me._source
		End Get
		Set
			If (String.Equals(Me._source, value) = false) Then
				Me.OnsourceChanging(value)
				Me.SendPropertyChanging
				Me._source = value
				Me.SendPropertyChanged("source")
				Me.OnsourceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sourceType", DbType:="VarChar(200)")>  _
	Public Property sourceType() As String
		Get
			Return Me._sourceType
		End Get
		Set
			If (String.Equals(Me._sourceType, value) = false) Then
				Me.OnsourceTypeChanging(value)
				Me.SendPropertyChanging
				Me._sourceType = value
				Me.SendPropertyChanged("sourceType")
				Me.OnsourceTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Part_Stock", Storage:="_Part", ThisKey:="partNr", OtherKey:="partNr", IsForeignKey:=true)>  _
	Public Property Part() As Part
		Get
			Return Me._Part.Entity
		End Get
		Set
			Dim previousValue As Part = Me._Part.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Part.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Part.Entity = Nothing
					previousValue.Stocks.Remove(Me)
				End If
				Me._Part.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Stocks.Add(Me)
					Me._partNr = value.partNr
				Else
					Me._partNr = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Part")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SumOfStock")>  _
Partial Public Class SumOfStock
	
	Private _partNr As String
	
	Private _SumOfStock As System.Nullable(Of Double)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_partNr", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property partNr() As String
		Get
			Return Me._partNr
		End Get
		Set
			If (String.Equals(Me._partNr, value) = false) Then
				Me._partNr = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SumOfStock", DbType:="Float")>  _
	Public Property SumOfStock() As System.Nullable(Of Double)
		Get
			Return Me._SumOfStock
		End Get
		Set
			If (Me._SumOfStock.Equals(value) = false) Then
				Me._SumOfStock = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.OrderDerivation")>  _
Partial Public Class OrderDerivation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _orderId As String
	
	Private _requirementId As Integer
	
	Private _mrpRound As String
	
	Private _deriveQty As Double
	
	Private _ProcessOrder As EntityRef(Of ProcessOrder)
	
	Private _Requirement As EntityRef(Of Requirement)
	
    #Region "可扩展性方法定义"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnorderIdChanging(value As String)
    End Sub
    Partial Private Sub OnorderIdChanged()
    End Sub
    Partial Private Sub OnrequirementIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnrequirementIdChanged()
    End Sub
    Partial Private Sub OnmrpRoundChanging(value As String)
    End Sub
    Partial Private Sub OnmrpRoundChanged()
    End Sub
    Partial Private Sub OnderiveQtyChanging(value As Double)
    End Sub
    Partial Private Sub OnderiveQtyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ProcessOrder = CType(Nothing, EntityRef(Of ProcessOrder))
		Me._Requirement = CType(Nothing, EntityRef(Of Requirement))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._Requirement.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_orderId", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property orderId() As String
		Get
			Return Me._orderId
		End Get
		Set
			If (String.Equals(Me._orderId, value) = false) Then
				If Me._ProcessOrder.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnorderIdChanging(value)
				Me.SendPropertyChanging
				Me._orderId = value
				Me.SendPropertyChanged("orderId")
				Me.OnorderIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requirementId", DbType:="Int NOT NULL")>  _
	Public Property requirementId() As Integer
		Get
			Return Me._requirementId
		End Get
		Set
			If ((Me._requirementId = value)  _
						= false) Then
				Me.OnrequirementIdChanging(value)
				Me.SendPropertyChanging
				Me._requirementId = value
				Me.SendPropertyChanged("requirementId")
				Me.OnrequirementIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mrpRound", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property mrpRound() As String
		Get
			Return Me._mrpRound
		End Get
		Set
			If (String.Equals(Me._mrpRound, value) = false) Then
				Me.OnmrpRoundChanging(value)
				Me.SendPropertyChanging
				Me._mrpRound = value
				Me.SendPropertyChanged("mrpRound")
				Me.OnmrpRoundChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_deriveQty", DbType:="Float NOT NULL")>  _
	Public Property deriveQty() As Double
		Get
			Return Me._deriveQty
		End Get
		Set
			If ((Me._deriveQty = value)  _
						= false) Then
				Me.OnderiveQtyChanging(value)
				Me.SendPropertyChanging
				Me._deriveQty = value
				Me.SendPropertyChanged("deriveQty")
				Me.OnderiveQtyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ProcessOrder_OrderDerivation", Storage:="_ProcessOrder", ThisKey:="orderId", OtherKey:="orderNr", IsForeignKey:=true)>  _
	Public Property ProcessOrder() As ProcessOrder
		Get
			Return Me._ProcessOrder.Entity
		End Get
		Set
			Dim previousValue As ProcessOrder = Me._ProcessOrder.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ProcessOrder.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ProcessOrder.Entity = Nothing
					previousValue.OrderDerivations.Remove(Me)
				End If
				Me._ProcessOrder.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OrderDerivations.Add(Me)
					Me._orderId = value.orderNr
				Else
					Me._orderId = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ProcessOrder")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Requirement_OrderDerivation", Storage:="_Requirement", ThisKey:="id", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property Requirement() As Requirement
		Get
			Return Me._Requirement.Entity
		End Get
		Set
			Dim previousValue As Requirement = Me._Requirement.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Requirement.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Requirement.Entity = Nothing
					previousValue.OrderDerivation = Nothing
				End If
				Me._Requirement.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OrderDerivation = Me
					Me._id = value.id
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Requirement")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.NumericBuild")>  _
Partial Public Class NumericBuild
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idUniq As Integer
	
	Private _idType As String
	
	Private _prefix As String
	
	Private _suffix As String
	
	Private _max As Long
	
	Private _min As Integer
	
	Private _currentNumber As Long
	
	Private _description As String
	
    #Region "可扩展性方法定义"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidUniqChanging(value As Integer)
    End Sub
    Partial Private Sub OnidUniqChanged()
    End Sub
    Partial Private Sub OnidTypeChanging(value As String)
    End Sub
    Partial Private Sub OnidTypeChanged()
    End Sub
    Partial Private Sub OnprefixChanging(value As String)
    End Sub
    Partial Private Sub OnprefixChanged()
    End Sub
    Partial Private Sub OnsuffixChanging(value As String)
    End Sub
    Partial Private Sub OnsuffixChanged()
    End Sub
    Partial Private Sub OnmaxChanging(value As Long)
    End Sub
    Partial Private Sub OnmaxChanged()
    End Sub
    Partial Private Sub OnminChanging(value As Integer)
    End Sub
    Partial Private Sub OnminChanged()
    End Sub
    Partial Private Sub OncurrentNumberChanging(value As Long)
    End Sub
    Partial Private Sub OncurrentNumberChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idUniq", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idUniq() As Integer
		Get
			Return Me._idUniq
		End Get
		Set
			If ((Me._idUniq = value)  _
						= false) Then
				Me.OnidUniqChanging(value)
				Me.SendPropertyChanging
				Me._idUniq = value
				Me.SendPropertyChanged("idUniq")
				Me.OnidUniqChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idType", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property idType() As String
		Get
			Return Me._idType
		End Get
		Set
			If (String.Equals(Me._idType, value) = false) Then
				Me.OnidTypeChanging(value)
				Me.SendPropertyChanging
				Me._idType = value
				Me.SendPropertyChanged("idType")
				Me.OnidTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_prefix", DbType:="VarChar(10)")>  _
	Public Property prefix() As String
		Get
			Return Me._prefix
		End Get
		Set
			If (String.Equals(Me._prefix, value) = false) Then
				Me.OnprefixChanging(value)
				Me.SendPropertyChanging
				Me._prefix = value
				Me.SendPropertyChanged("prefix")
				Me.OnprefixChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_suffix", DbType:="VarChar(10)")>  _
	Public Property suffix() As String
		Get
			Return Me._suffix
		End Get
		Set
			If (String.Equals(Me._suffix, value) = false) Then
				Me.OnsuffixChanging(value)
				Me.SendPropertyChanging
				Me._suffix = value
				Me.SendPropertyChanged("suffix")
				Me.OnsuffixChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_max", DbType:="BigInt NOT NULL")>  _
	Public Property max() As Long
		Get
			Return Me._max
		End Get
		Set
			If ((Me._max = value)  _
						= false) Then
				Me.OnmaxChanging(value)
				Me.SendPropertyChanging
				Me._max = value
				Me.SendPropertyChanged("max")
				Me.OnmaxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_min", DbType:="Int NOT NULL")>  _
	Public Property min() As Integer
		Get
			Return Me._min
		End Get
		Set
			If ((Me._min = value)  _
						= false) Then
				Me.OnminChanging(value)
				Me.SendPropertyChanging
				Me._min = value
				Me.SendPropertyChanged("min")
				Me.OnminChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_currentNumber", DbType:="BigInt NOT NULL")>  _
	Public Property currentNumber() As Long
		Get
			Return Me._currentNumber
		End Get
		Set
			If ((Me._currentNumber = value)  _
						= false) Then
				Me.OncurrentNumberChanging(value)
				Me.SendPropertyChanging
				Me._currentNumber = value
				Me.SendPropertyChanged("currentNumber")
				Me.OncurrentNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MrpRound")>  _
Partial Public Class MrpRound
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _mrpRound As String
	
	Private _runningStatus As String
	
	Private _time As Date
	
	Private _launcher As String
	
    #Region "可扩展性方法定义"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnmrpRoundChanging(value As String)
    End Sub
    Partial Private Sub OnmrpRoundChanged()
    End Sub
    Partial Private Sub OnrunningStatusChanging(value As String)
    End Sub
    Partial Private Sub OnrunningStatusChanged()
    End Sub
    Partial Private Sub OntimeChanging(value As Date)
    End Sub
    Partial Private Sub OntimeChanged()
    End Sub
    Partial Private Sub OnlauncherChanging(value As String)
    End Sub
    Partial Private Sub OnlauncherChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mrpRound", DbType:="VarChar(200) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property mrpRound() As String
		Get
			Return Me._mrpRound
		End Get
		Set
			If (String.Equals(Me._mrpRound, value) = false) Then
				Me.OnmrpRoundChanging(value)
				Me.SendPropertyChanging
				Me._mrpRound = value
				Me.SendPropertyChanged("mrpRound")
				Me.OnmrpRoundChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_runningStatus", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property runningStatus() As String
		Get
			Return Me._runningStatus
		End Get
		Set
			If (String.Equals(Me._runningStatus, value) = false) Then
				Me.OnrunningStatusChanging(value)
				Me.SendPropertyChanging
				Me._runningStatus = value
				Me.SendPropertyChanged("runningStatus")
				Me.OnrunningStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_time", DbType:="DateTime NOT NULL")>  _
	Public Property time() As Date
		Get
			Return Me._time
		End Get
		Set
			If ((Me._time = value)  _
						= false) Then
				Me.OntimeChanging(value)
				Me.SendPropertyChanging
				Me._time = value
				Me.SendPropertyChanged("time")
				Me.OntimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_launcher", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property launcher() As String
		Get
			Return Me._launcher
		End Get
		Set
			If (String.Equals(Me._launcher, value) = false) Then
				Me.OnlauncherChanging(value)
				Me.SendPropertyChanging
				Me._launcher = value
				Me.SendPropertyChanged("launcher")
				Me.OnlauncherChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
